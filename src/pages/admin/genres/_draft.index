import { Tag, Input } from "antd";
import { TweenOneGroup } from "rc-tween-one";
import { PlusOutlined } from "@ant-design/icons";
import React, { ReactElement, useRef, useState } from "react";
import { Genre } from "app/model/genre";
import "antd/dist/antd.css";
import "./index.css";

export default function EditableTagGroup(): ReactElement {

	const [tags, setTags] = useState<Array<Genre>>([]);
	const [inputVisible, setInputVisible] = useState(false);
	const [inputValue, setInputValue] = useState("");
	const saveInputRef = useRef(null);

	function handleClose(removedTag: Genre) {
		const new_tags = tags.filter(tag => tag.id !== removedTag.id);
		setTags(new_tags);
	};

	function showInput() {
		// setState({ inputVisible: true }, () => input.focus());
		setInputVisible(true);
	};

	function handleInputChange(e) {
		setInputValue(e.target.value);
	};

	function handleInputConfirm() {
		// if (inputValue && tags.indexOf(inputValue) === -1) {
		// }
		setTags([...tags, { id: 12, name: inputValue }]);
		setInputValue("");
		setInputVisible(false);
	};

	// const saveInputRef = input => {
	// 	input = input;
	// };

	const forMap = (tag: Genre) => {
		const tagElem = (
			<Tag
				closable
				onClose={e => {
					e.preventDefault();
					handleClose(tag);
				}}
			>
				{tag.name}
			</Tag>
		);
		return (
			<span key={tag.id} style={{ display: "inline-block" }}>
				{tagElem}
			</span>
		);
	};

	const tagChild = tags.map(forMap);
	return (
		<>
			<Tag closable>hello</Tag>
			<div style={{ marginBottom: 16 }}>
				<TweenOneGroup
					enter={{
						scale: 0.8,
						opacity: 0,
						type: "from",
						duration: 100,
					}}
					onEnd={e => {
						if (e.type === "appear" || e.type === "enter") {
							// e.target.style = "display: inline-block";
						}
					}}
					leave={{ opacity: 0, width: 0, scale: 0, duration: 200 }}
					appear={false}
				>
					{tagChild}
				</TweenOneGroup>
			</div>
			{inputVisible && (
				<Input
					ref={saveInputRef}
					type="text"
					size="small"
					style={{ width: 78 }}
					value={inputValue}
					onChange={handleInputChange}
					onBlur={handleInputConfirm}
					onPressEnter={handleInputConfirm}
				/>
			)}
			{!inputVisible && (
				<Tag onClick={showInput} className="site-tag-plus">
					<PlusOutlined /> New Tag
				</Tag>
			)}
		</>
	);
}


